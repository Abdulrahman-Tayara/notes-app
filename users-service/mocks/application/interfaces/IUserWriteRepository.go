// Code generated by mockery v2.14.0. DO NOT EDIT.

package interfaces

import (
	core "github.com/Abdulrahman-Tayara/notes-app/pkg/core"
	entity "github.com/Abdulrahman-Tayara/notes-app/users-service/core/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IUserWriteRepository is an autogenerated mock type for the IUserWriteRepository type
type IUserWriteRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *IUserWriteRepository) Delete(_a0 *entity.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: id
func (_m *IUserWriteRepository) DeleteById(id core.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *IUserWriteRepository) Save(_a0 *entity.User) (*entity.User, error) {
	ret := _m.Called(_a0)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *IUserWriteRepository) Update(_a0 *entity.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserWriteRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserWriteRepository creates a new instance of IUserWriteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserWriteRepository(t mockConstructorTestingTNewIUserWriteRepository) *IUserWriteRepository {
	mock := &IUserWriteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
