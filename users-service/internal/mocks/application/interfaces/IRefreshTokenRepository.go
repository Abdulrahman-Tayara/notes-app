// Code generated by mockery v2.14.0. DO NOT EDIT.

package interfaces

import (
	types "github.com/Abdulrahman-Tayara/notes-app/users-service/core/application/types"
	mock "github.com/stretchr/testify/mock"
)

// IRefreshTokenRepository is an autogenerated mock type for the IRefreshTokenRepository type
type IRefreshTokenRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: token
func (_m *IRefreshTokenRepository) Delete(token *types.RefreshToken) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.RefreshToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByToken provides a mock function with given fields: token
func (_m *IRefreshTokenRepository) GetByToken(token string) (*types.RefreshToken, error) {
	ret := _m.Called(token)

	var r0 *types.RefreshToken
	if rf, ok := ret.Get(0).(func(string) *types.RefreshToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RefreshToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: token
func (_m *IRefreshTokenRepository) Save(token *types.RefreshToken) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.RefreshToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIRefreshTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRefreshTokenRepository creates a new instance of IRefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRefreshTokenRepository(t mockConstructorTestingTNewIRefreshTokenRepository) *IRefreshTokenRepository {
	mock := &IRefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
