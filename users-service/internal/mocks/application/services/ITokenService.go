// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	services "github.com/Abdulrahman-Tayara/notes-app/users-service/core/application/services"
	mock "github.com/stretchr/testify/mock"
)

// ITokenService is an autogenerated mock type for the ITokenService type
type ITokenService struct {
	mock.Mock
}

// Generate provides a mock function with given fields: input
func (_m *ITokenService) Generate(input *services.GenerateInput) (services.Token, error) {
	ret := _m.Called(input)

	var r0 services.Token
	if rf, ok := ret.Get(0).(func(*services.GenerateInput) services.Token); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(services.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*services.GenerateInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: token
func (_m *ITokenService) Parse(token services.Token) (services.Payload, error) {
	ret := _m.Called(token)

	var r0 services.Payload
	if rf, ok := ret.Get(0).(func(services.Token) services.Payload); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(services.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewITokenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewITokenService creates a new instance of ITokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITokenService(t mockConstructorTestingTNewITokenService) *ITokenService {
	mock := &ITokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
